map 에서 key를 쓸때 
key = { index } 를 써야할때가 있고 쓰지말아야 할때가있음
index를 써도될때가 언제냐면 (예를 들어서 faq 나 절때 안바뀌는 리스트값) 
쓰지말아야할때는 밑에 설명

/0/1/2/3/ 이렇게 있을때
인덱스 1 이랑 인덱스 2 에 x 가 들어가면

/0/1/x/2/3/ 이렇게

그러면 각각의 인덱스는 0,1,2,3,4 가 됨 
인덱스가 변함

그러면 리액트가 랜더링 할때 0,1 만 랜더링을 안하고 x 뒤 모든값을 바뀌지 않았는데도 리랜더링 함 
그래서 index를 쓰지 말아야함. 



=====================================

  const onPress = useCallback(
    (id: number) => () => {
      const result = lists.map((list, index) => {
        if (id === index) {
          return { ...list, isActive: !list.isActive };
        } // 클릭해서 업데이트를 시킬애들 (id === index) 

	// 만약에  { ...list, isActive: !list.isActive } 이걸 그냥 쓰면
 	// { key1: 그대로값 , key2: 그대로값 , isActive: !list.isActive } 이렇게 써야함
	// isActive: !list.isActive 뺀 나머지를 안바꾸니까 ...list 이렇게 풀어서 쓴거임

        return { ...list, isActive: false }; // 업데이트를 안시키는 애들
      });

      setState(result); // 바뀐배열을 업데이트
    },
    [chips]
  );


return { ...list, isActive: !list.isActive }; 

이부분 잘보면 ...list 를 풀고 ( 안바뀌니까 )  isActive: !list.isActive 바뀌는 애만 이렇게 해준거임

객체보면

const list = { 
 key1 : value1
 key2 : value2
 isActive : true
} 

이렇게 있는데  ...list 를 풀면 
key1 : value1
 key2 : value2
 isActive : true 얘네가 나옴
근데  isActive : true 얘만 업데이트 해주고 싶은거야  isActive : false 이렇게 

그래서 ...list (isActive 뺀 나머지 애들만 냅두고)  isActive : !isActive (원래값에서 반대로)
업데이트를 해준거임