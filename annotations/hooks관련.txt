useEffect : 값이 변경될때만 해당이벤트를 처리하는 hooks 문법
weTrip SocialSignin.tsx 참고

예시 코드 1 : const { isAppleSuccess } = useSelector((state: RootState) => state.signIn);

redux 로부터 isAppleSuccess(boolen)값을 가져왔을때(업데이트) 되었을때
이값을 토대로 특정 이벤트나 동작을 처리하고싶다면, useEffect 를 사용하면된다

예시 코드 2 : 
  useEffect(() => {
    if (isAppleSuccess !== null && !isAppleSuccess) {
      dispatch(getUriRequest());
    }
  }, [isAppleSuccess, dispatch]);

useLayoutEffect 는 view를 그리기전에 실행 그냥 이펙트는 그리고나서 실행

위 코드는 isAppleSuccess 가 null 이 아니고, isAppleSuccess 가 false 일때에만
dispatch 하여 nice인증창 url을 호출함.이렇게되면 isAppleSuccess 값이 변경될때에만 저렇게 호출한다는것
그리고 디펜던시 [isAppleSuccess, dispatch]에 반드시 작성해주어야한다. 값이 바뀔때마다 실행하라는 구문

유즈 이펙트는 디펜던시에 ~~~ 값이 있고
값이 변경되면 실행되고 아니면 실행을 안함
제일 처음 , 디펜던시에 값이 변경될때 , 컴포넌트가 사라졌을때 총 3번 변경된다


-----------------------------------------------------------------
  useEffect(() => {
      console.log("start 해당페이지에서 단 한번만 호출")

      return() => {
	console.log("start 해당페이지에서 나갈때 한번만 호출")
      }
  }, []);


-----------------------------------------------------------------
 useMemo() : 값을 저장함. 값을 저장하여 변경된값이 없을때 캐싱되어져서
리랜더링을 안한다.
  const isApple = useMemo(() => {
    return Platform.OS === 'ios' || Platform.OS === 'macos';
  }, []);

-----------------------------------------------------------------
useCallback () : 함수를 저장. 함수를 저장하여 변경된값이 없을때 캐싱되어져서
리랜더링을 안한다.

useCallback () 에 다시 설명하자면
useCallback(() => {
    if (어떤값~~~) {
      dispatch(함수);
    }
  }, [dispatch]);

유즈콜백함수가 호출될때 dispatch 가 변경되면 함수를 새로만들고
변경안되면 전에껄 그대로 씀 

-----------------------------------------------------------------
useSelector () : redux로부터 저장된값을 가져온다. (어디서든지 redux에 저장되어있다면 값을 가져올수있다)
const { isAppleSuccess } = useSelector((state: RootState) => state.signIn);
redux 에 저장된 isAppleSuccess 의 값을 가져온다.

-----------------------------------------------------------------
dispatch : redux에 저장하여 saga에게 알린다. 
const dispatch = useDispatch();
dispatch(getUriRequest());

-----------------------------------------------------------------
useState 

ex)

const [isValid , setIsValid] = useState({isValid : true , message : " "})

isValid.message 
// " "  

이렇게 초기값을 객체로 사용가능함.











