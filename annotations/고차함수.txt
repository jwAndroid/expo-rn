함수를 리턴 tsx 쪽 컴포넌트안에서 함수 매개부에 뭔가 넣어주고싶다면
예를들어서  
<Pressable style={styles.appleButton} onPress={onPress('ios')}>
이런식으로 하려면? 
고차함수를 사용하면 된다.

함수를 만들고 다른함수에서 호출하려고할때는 그냥 내가 알고있는 매개부에 전달받아서 사용하면된다.
예를들어서 
const handlePress = useCallback(async (url: string, replaceUrl: string) =>  ... 이렇게
사용할때는 ?? handlePress("url", "replaceUrl"); 이렇게

그리고 개념은 함수안에 함수가 하나 더 들어간것
예를들어서
  const onToggleOpen = useCallback(() => {
      setIsSignOut(isOpen);
    },
    []
  );

이런 함수가 있는데
밑에서  onPress={onToggleOpen} 클릭할때 함수실행시키는중
그런데 내가 
onPress={onToggleOpen(true)} 
이렇게 매개부에 어떤값을 넣어서 함수를 실행시키고 싶다면

  const onToggleOpen = useCallback(
    (isOpen: boolean) => () => {
      setIsSignOut(isOpen);
    },
    []
  );

유즈콜백 매개부에 (isOpen: boolean) => ()  만 넣어주면 끝이다.

그리고 함수가 원래 onToggleOpen () 이거였는데
onToggleOpen(true) () 로 실행시켜야한다
onToggleOpen(true) 까지가 함수형태이고
onToggleOpen(true) () 가 함수실행 명령이다.

() => { 
 return () => {} 
}

이 형태가 고차함수임.

밑에는 내가 했던 방식인데 참고만
====================================================

import React, { memo, useCallback, useMemo, useState } from 'react';
import {
  Linking,
  Platform,
  Pressable,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';

import {
  INSTALL_URL_ANDROID,
  NOT_INSTALL_URL_ANDROID,
  INSTALL_URL_IOS,
  NOT_INSTALL_URL_IOS,
} from './src/link';

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    flex: 1,
    backgroundColor: '#303030',
    alignItems: 'center',
    justifyContent: 'center',
  },
  appleButton: {
    flex: 1,
    paddingVertical: 3,
    marginHorizontal: 5,
    marginLeft: 10,
    borderRadius: 8,
    backgroundColor: '#0099ff',
  },
  androidButton: {
    flex: 1,
    paddingVertical: 3,
    marginHorizontal: 5,
    marginRight: 10,
    borderRadius: 8,
    backgroundColor: '#22ddb9',
  },
  text: {
    textAlign: 'center',
    textAlignVertical: 'center',
    paddingVertical: 14,
    color: '#fff',
  },
});

const App = () => {
  const [platform, setPlatform] = useState('');

  const onPress = useCallback(
    (platfom: string) => () => {
      setPlatform(platfom);

      console.log(`platfom: ${platform}`);

      if (Platform.OS === platfom) {
        handlePress(INSTALL_URL_ANDROID, NOT_INSTALL_URL_ANDROID);
      } else {
        handlePress(INSTALL_URL_IOS, NOT_INSTALL_URL_IOS);
      }
    },
    []
  );

  const handlePress = useCallback(async (url: string, replaceUrl: string) => {
    const isInstall = await Linking.canOpenURL(url);
    console.log(`isInstall: ${isInstall}`);

    if (isInstall) {
      await Linking.openURL(url);
    } else {
      await Linking.openURL(replaceUrl);
    }
  }, []);

  return (
    <View style={styles.container}>
      <StatusBar style="auto" />

      <Pressable style={styles.appleButton} onPress={onPress('ios')}>
        <Text style={styles.text}>IOS</Text>
      </Pressable>

      <Pressable style={styles.androidButton} onPress={onPress('android')}>
        <Text style={styles.text}>ANDROID</Text>
      </Pressable>
    </View>
  );
};

export default memo(App);
