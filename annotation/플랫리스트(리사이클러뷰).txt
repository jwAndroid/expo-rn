이 개념은 리사이클러뷰 만큼 상당히 중요함.
엑스포 : https://docs.expo.dev/versions/latest/react-native/virtualizedlist/
리액트 네이티브 : https://reactnative.dev/docs/virtualizedlist
windowsize 자세한 설명글 : https://codingbroker.tistory.com/110
// BlockList 참고
// windowsize는 직접 해보거나 위 설명글을 다시 참고하면 됨.

FlatList 컴포넌트 라고 부른다
$ 리액트랑 다름. 리액트는 더 어렵다고함, item템의 크기를 구해서 어쩌구저쩌구 해야함.

중요한건
windowsize = {3} // 디폴트 21 이 수의 의미는 화면의 개수를 뜻함. 3개의 화면 21개의 화면 을 뜻함.
이뜻은
밑에있는걸 화면이고 보여지는 개수라 치면

0 --> 처음화면이라 위에가 없음
10 --> 현재 보여지는 화면의 아이템 개수
10 --> 내렸을때의 아이템을 미리 랜더링한 아이템의 개수
// 그니까 총 3개의 화면만 랜더링해서 준비해놓는거니까 0에서 하나 보여지는화면 하나 뒤에서 대기해놓는화면 하나 이렇게 총 3개 windowsize = {3} 를 대기해놓는것
가 된다


90 -> 처음 화면이라 없음. 10개의 화면 ( 처음보여지는 아이템개수 9 * 10개의 화면 === 그래서 90)
9 -> 현재 보여지는 개수 1개의 화면(9개만 보여짐)
90 -> 10의 배수를 랜더링 한다고함 10 ( 처음보여지는 아이템개수 9 * 10개의 화면 === 그래서 90)
windowsize = {21} 
이 의미는 잘 보면 맨처음에 보여지는 화면이 9개잖아?
앞으로 10개의 화면이라는거야 그러면 9개에서 총 10개의 화면이 대기하면 90개의 아이템이 있겠지?
뒤로는 똑같이 10개의 화면이 대기해놓는것임 9개의 아이템이 그래서
10개의화면 + 1개의화면 + 10개의화면 === 21개의 화면인거임

왜 21 이냐면 21개의 화면까지는 리액트에서 커버 가능해가지고 해놓은것.

n*10
n 
n*10

그리고 export memo() 를 반드시 해야함. 

      <FlatList
        data={data}
        renderItem={renderItem}
        keyExtractor={keyExtractor}
      />

여기서 keyExtractor={keyExtractor} 
이건 리액트의 성능을 최적화 하기위해서 하는건데
id 를 정해서 그 아이디를 캐싱되어짐. 만약에 어떤 id 의 값이 달라졌거나 삭제되었다면
업데이트를 위 keyExtractor={keyExtractor} 로 딱 하나만 진행하는거기 때문에 반드시 넣어줘야함.


그리고 어떻게 아이템(리사이클러뷰 아이템처럼)을 만드냐는 건데

const data: IItem[] = Array(1000)
  .fill(null)
  .map((_, index) => ({
    id: `${index}`,
    uri: '',
    nickname: '위트립유저닉네임',
  }));

interface IItem {
  id: string;
  uri: string;
  nickname: string;
}

  const renderItem = useCallback<ListRenderItem<IItem>>(
    ({ item }) => (
      <UserItem
        uri={item.uri}
        nickname={item.nickname}
        buttonText="차단해제"
        onPress={onPress}
      />
    ),
    [onPress]
  );

      <FlatList
        data={data}
        renderItem={renderItem}
        keyExtractor={keyExtractor}
      />

이렇게 넣어준다.

위부터 살펴보면
interface IItem 으로 타입을 명시해주고
renderItem 의 타입은 ListRenderItem 이라는 
import { FlatList, ListRenderItem } from 'react-native'; 에서 가져온것이다.
그리고 가장중요한건 ListRenderItem 의 타입은 IItem 이라는것이다
이 아이템으로 실행한다.

그리고 해당함수의 밑에 구현부를 보면은
구조분해로 인해 item 은 위 리스트의 아이템이 된다.
item 객체 ( 어댑터 홀더 안쪽과 비슷함 ) 로 <UserItem> 을 랜더한다는 표현임


===============






